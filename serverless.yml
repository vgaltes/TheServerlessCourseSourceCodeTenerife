service: gettogether

plugins:
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, self:custom.defaultStage}

custom:
  defaultRegion: eu-west-1
  defaultStage: dev${env:SLSUSER, ""}
  getTogethersTableName:  ${self:provider.stage}-gettogethers
  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers
  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}
  notifyOrganiserDLQSnsTopicName: ${self:provider.stage}-joingettogetherdlq
  notifyOrganiserDLQSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.notifyOrganiserDLQSnsTopicName}

functions:
  getGetTogethers:
    handler: src/functions/getGetTogethers.handler
    events:
      - http:
          path: api/getTogethers
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: !GetAtt GetTogethersTable.Arn
      - Effect: Allow
        Action: ssm:GetParameters*
        Resource: arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/gettogethers/${self:provider.stage}/*
    environment:
      getTogethersTableNamePath: /gettogethers/${self:provider.stage}/secureTableName
  notifyOrganiser:
    handler: src/functions/notifyOrganiser.handler
    events:
      - sns: ${self:custom.joinGetTogetherSnsTopicName}
    onError: !Ref NotifyOrganiserDLQSnsTopic
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: !Ref NotifyOrganiserDLQSnsTopic
  notifyOrganiserDLQ:
    handler: src/functions/notifyOrganiserDLQ.handler
    events:
      - sns: 
          arn: !Ref NotifyOrganiserDLQSnsTopic
          topicName: ${self:custom.notifyOrganiserDLQSnsTopicName}
  joinGetTogether:
    handler: src/functions/joinGetTogether.handler
    events:
      - http:
          path: api/getTogether
          method: post
    environment:
      joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.joinGetTogetherSnsTopic}
  testAutoSubscribe:
    handler: src/functions/testAutoSubscribe.handler
    events:
      - http:
          method: get
          path: api/testAutoSubscribe

resources:
  Transform: AWS::Serverless-2016-10-31
  Resources:
    GetTogethersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.getTogethersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    SubscribeToApiGatewayLogs:
      Type: AWS::Serverless::Application
      Properties:
        Location:
          ApplicationId: arn:aws:serverlessrepo:us-east-1:374852340823:applications/auto-subscribe-log-group-to-arn
          SemanticVersion: 1.11.1
        Parameters:
          DestinationArn: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:cloudwatch-logs-to-logzio-tenerife-${self:provider.stage}-ship-logs-to-logzio
          Prefix: "/aws/lambda"
          OverrideManualConfigs: true
    NotifyOrganiserDLQSnsTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: ${self:custom.notifyOrganiserDLQSnsTopicName}